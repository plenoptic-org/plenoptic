[project]
name = "plenoptic"
dynamic = ["version"]
authors = [{name="Plenoptic authors"}]
description = "Python library for model-based stimulus synthesis."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Science/Research",
]
keywords = ['neuroscience', 'pytorch', 'visual information processing', 'machine learning', 'explainability', 'computational models']

dependencies = [
    "numpy>=1.1",
    "torch>=1.8,!=1.12.0",
    "pyrtools>=1.0.1",
    "scipy>=1.0",
    "matplotlib>=3.3",
    "tqdm>=4.29",
    "imageio>=2.5",
    "scikit-image>=0.15.0",
    "einops>=0.3.0",
    "importlib-resources>=6.0",
    "Deprecated",
]

[build-system]
requires = ["setuptools", "setuptools-scm[toml]"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
docs = [
     'sphinx',
     # fix sphinx 7 incompatibility issue
     'sphinx_rtd_theme>=1.3.0rc1',
     'numpydoc',
     'sphinxcontrib-apidoc',
     'sphinx-autodoc-typehints',
     'sphinx-copybutton',
     "myst-parser",
     "sphinxcontrib-bibtex",
     "sphinx-design",
     "pooch",
     "myst-nb",
     "ipywidgets",
     "torchvision",
     "pooch",
     "jupytext",
     "sphobjinv",
]

test = [
    "pytest>=5.1.2",
    'pytest-cov',
    'pytest-xdist',
    "pooch>=1.2.0",
]

lint = [
    "ruff>=0.6.8",
    'numpydoc',
]

dev = ["plenoptic[test,lint]"]

nb = [
    "jupyter",
    "ipywidgets",
    "nbclient>=0.5.5",
    "torchvision>=0.3",
    "pooch>=1.2.0",
    "jupytext",
]

[project.urls]
"Homepage" = "https://github.com/plenoptic-org/plenoptic"
"Documentation" = "https://docs.plenoptic.org"
"Download" = "https://zenodo.org/doi/10.5281/zenodo.10151130"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
version_scheme = 'python-simplified-semver'
local_scheme = 'no-local-version'

[tool.pytest.ini_options]
addopts = "--cov=plenoptic --cov-append -n auto --cov-report term"
testpaths = ["tests"]
doctest_optionflags = "NORMALIZE_WHITESPACE NUMBER ELLIPSIS"

# ignore a bunch of common plenoptic-generated warnings, and raise errors
# otherwise. this way we can actually stay on top of deprecations etc. Per docs
# (https://docs.pytest.org/en/stable/how-to/capture-warnings.html#controlling-warnings):
# "When a warning matches more than one option in the list, the action for the
# last matching option is performed."
filterwarnings = [
    "error",
    # pooch issue with python>=3.12, fixed in
    # https://github.com/fatiando/pooch/pull/458 but not in release as of April
    # 2025.
    "ignore:Python 3.14 will, by default, filter extracted tar archives:DeprecationWarning",
    # seems to be necessary to solve https://github.com/pytest-dev/pytest-cov/issues/693
    "ignore:Failed to generate report:",
]

# seems to be necessary to solve https://github.com/pytest-dev/pytest-cov/issues/693
[tool.coverage.run]
disable_warnings = ["module-not-measured"]

[tool.ruff]
extend-include = ["*.ipynb"]
src = ["src", "tests", "examples"]
# Exclude a variety of commonly ignored directories.
exclude = []

# Set the maximum line length (same as Black)
line-length = 88

indent-width = 4 # same as Black

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

docstring-code-format = true

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes: basic static analysis for common errors like undefined names
    # and missing imports.
    "F",
    # pyupgrade
    "UP",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # in particular, this looks for invalid escape sequences (has been an issue
    # for regex strings used in tests)
    "W",
    # docstrings, note that DOC rules (pydoclint) are all in preview, so have to be explicitly added
    "D", "DOC201", "DOC202", "DOC402", "DOC403", "DOC501",
    "ANN",
]
ignore = []

# allow preview rules, but require them to be explicitly added
preview = true
explicit-preview-rules = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.ruff.lint.per-file-ignores]
# Ignore docstring rules everywhere except for the `src/` directory, from
# https://docs.astral.sh/ruff/settings/#lint_per-file-ignores.
"!src/**.py" = ["D", "DOC", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.numpydoc_validation]
checks = [
    "all",
    "SA01",
    # will remove this eventually
    "EX01",
    "PR04",
]

# don't report on objects that match any of these regex
exclude = [
    "__dir__",
    # init has no docstring, documented in the class docstring
    "__init__",
    "noxfile",
]
