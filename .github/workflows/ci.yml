name: build
on:
  workflow_dispatch:
  schedule:
  - cron: 0 0 * * 0     # weekly
  pull_request:
    branches:
    - main
# want pooch to raise an error if I've updated the file and forgot to update the
# hash.
env:
  POOCH_ALLOW_UPDATES: false

concurrency:
  # from https://stackoverflow.com/a/72408109/4659293
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  notebooks_cpu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    name: Execute notebooks
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: setup.py
    - name: Setup FFmpeg
      uses: FedericoCarboni/setup-ffmpeg@v3.1
    - name: Install dependencies
      run: |
        pip install --upgrade --upgrade-strategy eager .[nb] papermill
    - name: Run notebooks
      run: |
        for file in $(find docs/tutorials/ -name '*.md'); do
           nb="${file/md/ipynb}"
           jupytext $file -o $nb --from myst
           # these first two notebooks take much longer than the rest to run.
           # So we use papermill's parameters to reduce the max number of steps
           # for synthesis in them (we want to test that each cell runs on the
           # cpu, but we don't need synthesis to go to completion).
           if [[ "$file" =~ "Portilla-Simoncelli" ]]; then
              papermill $nb $nb_output.ipynb -p short_synth_max_iter 10 -p long_synth_max_iter 10 -p longest_synth_max_iter 10 -k python3 --cwd "$(dirname $nb)"
           elif [[ "$file" =~ "Demo_Eigendistortion" ]]; then
              papermill $nb $nb_output.ipynb -p max_iter_frontend 10 -p max_iter_vgg 10 -k python3 --cwd "$(dirname $nb)"
           else
              jupyter execute $nb --kernel_name=python3
            fi
        done
  doctests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    name: Run doctests
    steps:
    - uses: actions/checkout@v4
    - name: Install Python 3
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        # using the --upgrade and --upgrade-strategy eager flags ensures that
        # pip will always install the latest allowed version of all
        # dependencies, to make sure the cache doesn't go stale
        pip install --upgrade --upgrade-strategy eager .[test]
    - name: Run doctests with pytest
      run: |
        # ignore warnings in doctests, since otherwise pytest fails
        pytest --doctest-modules src/ -W "ignore"
  check_sphinx_references:
    runs-on: ubuntu-latest
    name: Check sphinx references
    steps:
    - uses: actions/checkout@v4
    - name: Install Python 3
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: pip
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        # using the --upgrade and --upgrade-strategy eager flags ensures that
        # pip will always install the latest allowed version of all
        # dependencies, to make sure the cache doesn't go stale
        pip install --upgrade --upgrade-strategy eager .[docs]
    - name: Build docs (no notebooks)
      run: |
        # this is needed to create the sphinx obj.inv file
        make -C docs html O="-T"
        python linting/check_markdown.py docs/
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    name: Run pytest scripts
    steps:
    - uses: actions/checkout@v4
    - name: Install Python 3
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        # using the --upgrade and --upgrade-strategy eager flags ensures that
        # pip will always install the latest allowed version of all
        # dependencies, to make sure the cache doesn't go stale
        pip install --upgrade --upgrade-strategy eager .[test]
    - name: Run tests with pytest
      run: |
        pytest --cov-report xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.4.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  check_urls:
    runs-on: ubuntu-latest
    name: Check all urls are valid
    steps:
    - uses: actions/checkout@v4
    - uses: urlstechie/urlchecker-action@b643b43e2ac605e1475331c7b67247d242b7dce4 # 0.0.34
      with:
        file_types: .md,.py,.rst
        print_all: false
        timeout: 5
        retry_count: 3

  check:
    if: always()
    needs:
    - notebooks_cpu
    - doctests
    - tests
    - check_urls
    - check_sphinx_references
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether all tests and notebooks succeeded
      uses: re-actors/alls-green@afee1c1eac2a506084c274e9c02c8e0687b48d9e # v1.2.2
      with:
        jobs: ${{ toJSON(needs) }}
